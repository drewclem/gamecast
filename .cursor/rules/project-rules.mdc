---
description: 
globs: 
alwaysApply: true
---
  You are an expert in Laravel, PHP, and related web development technologies.
  Core Principles
  - Write concise, technical responses with accurate PHP/Laravel examples.
  - Prioritize SOLID principles for object-oriented programming and clean architecture.
  - Follow PHP and Laravel best practices, ensuring consistency and readability.
  - Design for scalability and maintainability, ensuring the system can grow with ease.
  - Prefer iteration and modularization over duplication to promote code reuse.
  - Use consistent and descriptive names for variables, methods, and classes to improve readability.
  
  Dependencies
  - Composer for dependency management
  - PHP 
  - Laravel 
  - Inertia
  - Vue

  PHP and Laravel Standards
  - Leverage PHP features when appropriate (e.g., typed properties, match expressions, constructor property promotion).
  - Adhere to PSR-12 coding standards for consistent code style.
  - Always use typed properties and return types.
  - Utilize Laravel's built-in features and helpers to maximize efficiency.
  - Implement robust error handling and logging:
    > Use Laravel's exception handling and logging features.
    > Create custom exceptions when necessary.
    > Employ try-catch blocks for expected exceptions.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database operations.
  - Create and maintain proper database migrations and seeders:
    > Never use the enum() field type in migrations.
    > Always use UUID primary keys.
  - Use Enums values instead of magic strings wherever possible
  - Always use PHPs native string helpers first, then Laravel's `Str` class if no equivelant method exists.
  - Always use PHPs native array helpers first, then Laravel's `collect` class if no equivelant method exists.
  - Always eager load relationship to avoid N+1 queries.
  Laravel Best Practices
  - Use Eloquent ORM and Query Builder over raw SQL queries when possible
  - Implement Repository and Service patterns for better code organization and reusability
  - Utilize Laravel's built-in authentication and authorization features (Sanctum, Policies)
  - Leverage Laravel's caching mechanisms (Redis) for improved performance
  - Use job queues and Laravel Horizon for handling long-running tasks and background processing
  - Implement comprehensive testing using Pest for controller and model tests
  - Use API resources and versioning for building robust and maintainable APIs
  - Implement proper error handling and logging using Laravel's exception handler.
  - Utilize Laravel's validation features, including Form Requests, for data integrity
  - Implement database indexing and use Laravel's query optimization features for better performance
  - Leverage Laravel Nova for rapid admin panel development
  - Implement proper security measures, including CSRF protection, XSS prevention, and input sanitization

  Code Architecture
    * Naming Conventions:
      - Use consistent naming conventions for folders, classes, and files.
      - Follow Laravel's conventions: singular for models, plural for controllers (e.g., User.php, UsersController.php).
      - Use PascalCase for class names, camelCase for method names and variables, and snake_case for database columns.
    * Controller Design:
      - Controllers should be final classes to prevent inheritance.
      - Make controllers read-only (i.e., no property mutations).
      - Avoid injecting dependencies directly into controllers. Instead, use method injection or service classes.
      - All controllers should have a separate request. (i.e.: IndexCandidatesController should have IndexCanidatesRequest)
      - Web controllers should return Inertia views instead of blade views.
        > Any props that do not need to be visibe on page load, use Inertia's deferred props.
      - Prefer usePoll on props pertaining to a game, it's questions, and the number of votes and watchers
    * Model Design:
      - Models should be final classes to ensure data integrity and prevent unexpected behavior from inheritance.
      - When creating a new data model, ask what domain it should reside in using the folders inside the `app` directory:
      - All new models should have a standard set of related classes that are Always created:
        > Database migration
        > Policy
        > Factory
        > Nova model
      - All new models should have the following structure:
        > `SoftDeletes` trait unless it is a pivot model
        > Use `$guarded`
        > Always cast appropriate field types

    * Attributes
      - When creating Laravel attrbute, always use the `Attribute` class format.

    * Enums
      - All enums should be string backed PHP 8 enum classes
      - Enums should have PascalCase cases and lowercase values

    * Form Requests
      - Always use Laravels Form Request objects for controller validation:
        > The class name should replace the word Controller with Request.
        > The rules should always be formatted as an array.
        > It should always contain an authorize() method with no return type

    * Resources
      - Any relationship reference in a resource should be called using `whenLoaded()` to avoid N+1 queries.

    * Services:
      - Organize services into model-specific services and other required services.
      - Service classes should be final and read-only.
      - Use services for complex business logic, keeping controllers thin.

    * Routing:
      - Maintain consistent and organized routes.
      - Choose the appropriate route file inside the domain folder based on the controller namespace.

    * Type Declarations:
      - Always use explicit return type declarations for methods and functions.
      - Use appropriate PHP type hints for method parameters.
      - Leverage PHP 8.3 features like union types and nullable types when necessary.

    * Data Type Consistency:
      - Be consistent and explicit with data type declarations throughout the codebase.
      - Use type hints for properties, method parameters, and return types.
      - Leverage PHP's strict typing to catch type-related errors early.

    * Error Handling:
      - Use Laravel's exception handling and logging features to handle exceptions.
        > Always default to using the `logger()` helper instead of the `Log` facade.
        > Always give the logged message a context array with key model IDs
        > Only log a `error()` when it is a critical error. Default to using `info()`
      - Create custom exceptions when necessary.
      - Use try-catch blocks for expected exceptions.
      - Handle exceptions gracefully and return appropriate responses.
      
  Key points
  - Follow Laravel’s MVC architecture for clear separation of business logic, data, and presentation layers.
  - Implement request validation using Form Requests to ensure secure and validated data inputs.
  - Use Laravel’s built-in authentication system, including Laravel Sanctum for API token management.
  - Ensure the REST API follows Laravel standards, using API Resources for structured and consistent responses.
  - Leverage task scheduling and event listeners to automate recurring tasks and decouple logic.
  - Implement database transactions using Laravel's database facade to ensure data consistency.
  - Use Eloquent ORM for database interactions, enforcing relationships and optimizing queries.
  - Always ensure there is a proper index on any column that is frequently queried.
    > write a database migration to add the index.
  - Optimize performance with caching mechanisms like Redis.
  - Ensure robust error handling and logging using Laravel’s exception handler and logging features.
  Testing
  - When using factories, use the Factory class directly with `::new()` instead of `Model::factory()`.
    > Use factory states whenever possible
    > Use `recycle()` for common models shared by factories
  - All test method names should begin with the word `test` and be PascalCase.
  - Test methods shoul dhave a `void` return type.
  - When using `assertDatabase` assertions, the table parameter should be class notation of the model instead of a string.
  - When writing Vue, opt to use existing components from the /Stencil directory when possible